// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: urltoimage/urltoimage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_urltoimage_2furltoimage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_urltoimage_2furltoimage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_urltoimage_2furltoimage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_urltoimage_2furltoimage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_urltoimage_2furltoimage_2eproto;
namespace liburltoimage {
class FileContent;
struct FileContentDefaultTypeInternal;
extern FileContentDefaultTypeInternal _FileContent_default_instance_;
class PDFMargin;
struct PDFMarginDefaultTypeInternal;
extern PDFMarginDefaultTypeInternal _PDFMargin_default_instance_;
class PDFOptions;
struct PDFOptionsDefaultTypeInternal;
extern PDFOptionsDefaultTypeInternal _PDFOptions_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace liburltoimage
PROTOBUF_NAMESPACE_OPEN
template<> ::liburltoimage::FileContent* Arena::CreateMaybeMessage<::liburltoimage::FileContent>(Arena*);
template<> ::liburltoimage::PDFMargin* Arena::CreateMaybeMessage<::liburltoimage::PDFMargin>(Arena*);
template<> ::liburltoimage::PDFOptions* Arena::CreateMaybeMessage<::liburltoimage::PDFOptions>(Arena*);
template<> ::liburltoimage::Request* Arena::CreateMaybeMessage<::liburltoimage::Request>(Arena*);
template<> ::liburltoimage::Response* Arena::CreateMaybeMessage<::liburltoimage::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace liburltoimage {

// ===================================================================

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liburltoimage.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liburltoimage.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kSizeFieldNumber = 2,
    kTypeFieldNumber = 3,
    kPdfoptionsFieldNumber = 6,
    kQualityFieldNumber = 4,
    kTransparentFieldNumber = 5,
    kCaptureBeyondViewportFieldNumber = 7,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string size = 2;
  void clear_size();
  const std::string& size() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_size(ArgT0&& arg0, ArgT... args);
  std::string* mutable_size();
  PROTOBUF_NODISCARD std::string* release_size();
  void set_allocated_size(std::string* size);
  private:
  const std::string& _internal_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_size(const std::string& value);
  std::string* _internal_mutable_size();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .liburltoimage.PDFOptions pdfoptions = 6;
  bool has_pdfoptions() const;
  private:
  bool _internal_has_pdfoptions() const;
  public:
  void clear_pdfoptions();
  const ::liburltoimage::PDFOptions& pdfoptions() const;
  PROTOBUF_NODISCARD ::liburltoimage::PDFOptions* release_pdfoptions();
  ::liburltoimage::PDFOptions* mutable_pdfoptions();
  void set_allocated_pdfoptions(::liburltoimage::PDFOptions* pdfoptions);
  private:
  const ::liburltoimage::PDFOptions& _internal_pdfoptions() const;
  ::liburltoimage::PDFOptions* _internal_mutable_pdfoptions();
  public:
  void unsafe_arena_set_allocated_pdfoptions(
      ::liburltoimage::PDFOptions* pdfoptions);
  ::liburltoimage::PDFOptions* unsafe_arena_release_pdfoptions();

  // int32 quality = 4;
  void clear_quality();
  int32_t quality() const;
  void set_quality(int32_t value);
  private:
  int32_t _internal_quality() const;
  void _internal_set_quality(int32_t value);
  public:

  // bool transparent = 5;
  void clear_transparent();
  bool transparent() const;
  void set_transparent(bool value);
  private:
  bool _internal_transparent() const;
  void _internal_set_transparent(bool value);
  public:

  // bool captureBeyondViewport = 7;
  void clear_capturebeyondviewport();
  bool capturebeyondviewport() const;
  void set_capturebeyondviewport(bool value);
  private:
  bool _internal_capturebeyondviewport() const;
  void _internal_set_capturebeyondviewport(bool value);
  public:

  // @@protoc_insertion_point(class_scope:liburltoimage.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::liburltoimage::PDFOptions* pdfoptions_;
    int32_t quality_;
    bool transparent_;
    bool capturebeyondviewport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_urltoimage_2furltoimage_2eproto;
};
// -------------------------------------------------------------------

class PDFOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liburltoimage.PDFOptions) */ {
 public:
  inline PDFOptions() : PDFOptions(nullptr) {}
  ~PDFOptions() override;
  explicit PROTOBUF_CONSTEXPR PDFOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PDFOptions(const PDFOptions& from);
  PDFOptions(PDFOptions&& from) noexcept
    : PDFOptions() {
    *this = ::std::move(from);
  }

  inline PDFOptions& operator=(const PDFOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDFOptions& operator=(PDFOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PDFOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const PDFOptions* internal_default_instance() {
    return reinterpret_cast<const PDFOptions*>(
               &_PDFOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PDFOptions& a, PDFOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(PDFOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDFOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PDFOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PDFOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PDFOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PDFOptions& from) {
    PDFOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDFOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liburltoimage.PDFOptions";
  }
  protected:
  explicit PDFOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 1,
    kFooterTemplateFieldNumber = 3,
    kHeaderTemplateFieldNumber = 4,
    kHeightFieldNumber = 5,
    kWidthFieldNumber = 6,
    kPageRangesFieldNumber = 9,
    kMarginFieldNumber = 10,
    kDisplayHeaderFooterFieldNumber = 2,
    kLandscapeFieldNumber = 7,
    kOmitBackgroundFieldNumber = 8,
    kPrintBackgroundFieldNumber = 11,
    kPreferCSSPageSizeFieldNumber = 12,
  };
  // string format = 1;
  void clear_format();
  const std::string& format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_format();
  PROTOBUF_NODISCARD std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // string footerTemplate = 3;
  void clear_footertemplate();
  const std::string& footertemplate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_footertemplate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_footertemplate();
  PROTOBUF_NODISCARD std::string* release_footertemplate();
  void set_allocated_footertemplate(std::string* footertemplate);
  private:
  const std::string& _internal_footertemplate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_footertemplate(const std::string& value);
  std::string* _internal_mutable_footertemplate();
  public:

  // string headerTemplate = 4;
  void clear_headertemplate();
  const std::string& headertemplate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_headertemplate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_headertemplate();
  PROTOBUF_NODISCARD std::string* release_headertemplate();
  void set_allocated_headertemplate(std::string* headertemplate);
  private:
  const std::string& _internal_headertemplate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_headertemplate(const std::string& value);
  std::string* _internal_mutable_headertemplate();
  public:

  // string height = 5;
  void clear_height();
  const std::string& height() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_height(ArgT0&& arg0, ArgT... args);
  std::string* mutable_height();
  PROTOBUF_NODISCARD std::string* release_height();
  void set_allocated_height(std::string* height);
  private:
  const std::string& _internal_height() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_height(const std::string& value);
  std::string* _internal_mutable_height();
  public:

  // string width = 6;
  void clear_width();
  const std::string& width() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_width(ArgT0&& arg0, ArgT... args);
  std::string* mutable_width();
  PROTOBUF_NODISCARD std::string* release_width();
  void set_allocated_width(std::string* width);
  private:
  const std::string& _internal_width() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_width(const std::string& value);
  std::string* _internal_mutable_width();
  public:

  // string pageRanges = 9;
  void clear_pageranges();
  const std::string& pageranges() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pageranges(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pageranges();
  PROTOBUF_NODISCARD std::string* release_pageranges();
  void set_allocated_pageranges(std::string* pageranges);
  private:
  const std::string& _internal_pageranges() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pageranges(const std::string& value);
  std::string* _internal_mutable_pageranges();
  public:

  // .liburltoimage.PDFMargin margin = 10;
  bool has_margin() const;
  private:
  bool _internal_has_margin() const;
  public:
  void clear_margin();
  const ::liburltoimage::PDFMargin& margin() const;
  PROTOBUF_NODISCARD ::liburltoimage::PDFMargin* release_margin();
  ::liburltoimage::PDFMargin* mutable_margin();
  void set_allocated_margin(::liburltoimage::PDFMargin* margin);
  private:
  const ::liburltoimage::PDFMargin& _internal_margin() const;
  ::liburltoimage::PDFMargin* _internal_mutable_margin();
  public:
  void unsafe_arena_set_allocated_margin(
      ::liburltoimage::PDFMargin* margin);
  ::liburltoimage::PDFMargin* unsafe_arena_release_margin();

  // bool displayHeaderFooter = 2;
  void clear_displayheaderfooter();
  bool displayheaderfooter() const;
  void set_displayheaderfooter(bool value);
  private:
  bool _internal_displayheaderfooter() const;
  void _internal_set_displayheaderfooter(bool value);
  public:

  // bool landscape = 7;
  void clear_landscape();
  bool landscape() const;
  void set_landscape(bool value);
  private:
  bool _internal_landscape() const;
  void _internal_set_landscape(bool value);
  public:

  // bool omitBackground = 8;
  void clear_omitbackground();
  bool omitbackground() const;
  void set_omitbackground(bool value);
  private:
  bool _internal_omitbackground() const;
  void _internal_set_omitbackground(bool value);
  public:

  // bool printBackground = 11;
  void clear_printbackground();
  bool printbackground() const;
  void set_printbackground(bool value);
  private:
  bool _internal_printbackground() const;
  void _internal_set_printbackground(bool value);
  public:

  // bool preferCSSPageSize = 12;
  void clear_prefercsspagesize();
  bool prefercsspagesize() const;
  void set_prefercsspagesize(bool value);
  private:
  bool _internal_prefercsspagesize() const;
  void _internal_set_prefercsspagesize(bool value);
  public:

  // @@protoc_insertion_point(class_scope:liburltoimage.PDFOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr footertemplate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headertemplate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr height_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr width_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pageranges_;
    ::liburltoimage::PDFMargin* margin_;
    bool displayheaderfooter_;
    bool landscape_;
    bool omitbackground_;
    bool printbackground_;
    bool prefercsspagesize_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_urltoimage_2furltoimage_2eproto;
};
// -------------------------------------------------------------------

class PDFMargin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liburltoimage.PDFMargin) */ {
 public:
  inline PDFMargin() : PDFMargin(nullptr) {}
  ~PDFMargin() override;
  explicit PROTOBUF_CONSTEXPR PDFMargin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PDFMargin(const PDFMargin& from);
  PDFMargin(PDFMargin&& from) noexcept
    : PDFMargin() {
    *this = ::std::move(from);
  }

  inline PDFMargin& operator=(const PDFMargin& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDFMargin& operator=(PDFMargin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PDFMargin& default_instance() {
    return *internal_default_instance();
  }
  static inline const PDFMargin* internal_default_instance() {
    return reinterpret_cast<const PDFMargin*>(
               &_PDFMargin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PDFMargin& a, PDFMargin& b) {
    a.Swap(&b);
  }
  inline void Swap(PDFMargin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDFMargin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PDFMargin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PDFMargin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PDFMargin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PDFMargin& from) {
    PDFMargin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDFMargin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liburltoimage.PDFMargin";
  }
  protected:
  explicit PDFMargin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBottomFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kTopFieldNumber = 4,
  };
  // string bottom = 1;
  void clear_bottom();
  const std::string& bottom() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bottom(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bottom();
  PROTOBUF_NODISCARD std::string* release_bottom();
  void set_allocated_bottom(std::string* bottom);
  private:
  const std::string& _internal_bottom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bottom(const std::string& value);
  std::string* _internal_mutable_bottom();
  public:

  // string left = 2;
  void clear_left();
  const std::string& left() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_left(ArgT0&& arg0, ArgT... args);
  std::string* mutable_left();
  PROTOBUF_NODISCARD std::string* release_left();
  void set_allocated_left(std::string* left);
  private:
  const std::string& _internal_left() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_left(const std::string& value);
  std::string* _internal_mutable_left();
  public:

  // string right = 3;
  void clear_right();
  const std::string& right() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_right(ArgT0&& arg0, ArgT... args);
  std::string* mutable_right();
  PROTOBUF_NODISCARD std::string* release_right();
  void set_allocated_right(std::string* right);
  private:
  const std::string& _internal_right() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_right(const std::string& value);
  std::string* _internal_mutable_right();
  public:

  // string top = 4;
  void clear_top();
  const std::string& top() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_top(ArgT0&& arg0, ArgT... args);
  std::string* mutable_top();
  PROTOBUF_NODISCARD std::string* release_top();
  void set_allocated_top(std::string* top);
  private:
  const std::string& _internal_top() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_top(const std::string& value);
  std::string* _internal_mutable_top();
  public:

  // @@protoc_insertion_point(class_scope:liburltoimage.PDFMargin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bottom_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr left_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr right_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr top_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_urltoimage_2furltoimage_2eproto;
};
// -------------------------------------------------------------------

class FileContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liburltoimage.FileContent) */ {
 public:
  inline FileContent() : FileContent(nullptr) {}
  ~FileContent() override;
  explicit PROTOBUF_CONSTEXPR FileContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileContent(const FileContent& from);
  FileContent(FileContent&& from) noexcept
    : FileContent() {
    *this = ::std::move(from);
  }

  inline FileContent& operator=(const FileContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileContent& operator=(FileContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileContent* internal_default_instance() {
    return reinterpret_cast<const FileContent*>(
               &_FileContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileContent& a, FileContent& b) {
    a.Swap(&b);
  }
  inline void Swap(FileContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileContent& from) {
    FileContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liburltoimage.FileContent";
  }
  protected:
  explicit FileContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:liburltoimage.FileContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_urltoimage_2furltoimage_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:liburltoimage.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "liburltoimage.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .liburltoimage.FileContent files = 3;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::liburltoimage::FileContent* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liburltoimage::FileContent >*
      mutable_files();
  private:
  const ::liburltoimage::FileContent& _internal_files(int index) const;
  ::liburltoimage::FileContent* _internal_add_files();
  public:
  const ::liburltoimage::FileContent& files(int index) const;
  ::liburltoimage::FileContent* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liburltoimage::FileContent >&
      files() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:liburltoimage.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liburltoimage::FileContent > files_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_urltoimage_2furltoimage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// string url = 1;
inline void Request::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& Request::url() const {
  // @@protoc_insertion_point(field_get:liburltoimage.Request.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.Request.url)
}
inline std::string* Request::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:liburltoimage.Request.url)
  return _s;
}
inline const std::string& Request::_internal_url() const {
  return _impl_.url_.Get();
}
inline void Request::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_url() {
  // @@protoc_insertion_point(field_release:liburltoimage.Request.url)
  return _impl_.url_.Release();
}
inline void Request::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.Request.url)
}

// string size = 2;
inline void Request::clear_size() {
  _impl_.size_.ClearToEmpty();
}
inline const std::string& Request::size() const {
  // @@protoc_insertion_point(field_get:liburltoimage.Request.size)
  return _internal_size();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_size(ArgT0&& arg0, ArgT... args) {
 
 _impl_.size_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.Request.size)
}
inline std::string* Request::mutable_size() {
  std::string* _s = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:liburltoimage.Request.size)
  return _s;
}
inline const std::string& Request::_internal_size() const {
  return _impl_.size_.Get();
}
inline void Request::_internal_set_size(const std::string& value) {
  
  _impl_.size_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_size() {
  
  return _impl_.size_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_size() {
  // @@protoc_insertion_point(field_release:liburltoimage.Request.size)
  return _impl_.size_.Release();
}
inline void Request::set_allocated_size(std::string* size) {
  if (size != nullptr) {
    
  } else {
    
  }
  _impl_.size_.SetAllocated(size, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.size_.IsDefault()) {
    _impl_.size_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.Request.size)
}

// string type = 3;
inline void Request::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Request::type() const {
  // @@protoc_insertion_point(field_get:liburltoimage.Request.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.Request.type)
}
inline std::string* Request::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:liburltoimage.Request.type)
  return _s;
}
inline const std::string& Request::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Request::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_type() {
  // @@protoc_insertion_point(field_release:liburltoimage.Request.type)
  return _impl_.type_.Release();
}
inline void Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.Request.type)
}

// int32 quality = 4;
inline void Request::clear_quality() {
  _impl_.quality_ = 0;
}
inline int32_t Request::_internal_quality() const {
  return _impl_.quality_;
}
inline int32_t Request::quality() const {
  // @@protoc_insertion_point(field_get:liburltoimage.Request.quality)
  return _internal_quality();
}
inline void Request::_internal_set_quality(int32_t value) {
  
  _impl_.quality_ = value;
}
inline void Request::set_quality(int32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:liburltoimage.Request.quality)
}

// bool transparent = 5;
inline void Request::clear_transparent() {
  _impl_.transparent_ = false;
}
inline bool Request::_internal_transparent() const {
  return _impl_.transparent_;
}
inline bool Request::transparent() const {
  // @@protoc_insertion_point(field_get:liburltoimage.Request.transparent)
  return _internal_transparent();
}
inline void Request::_internal_set_transparent(bool value) {
  
  _impl_.transparent_ = value;
}
inline void Request::set_transparent(bool value) {
  _internal_set_transparent(value);
  // @@protoc_insertion_point(field_set:liburltoimage.Request.transparent)
}

// .liburltoimage.PDFOptions pdfoptions = 6;
inline bool Request::_internal_has_pdfoptions() const {
  return this != internal_default_instance() && _impl_.pdfoptions_ != nullptr;
}
inline bool Request::has_pdfoptions() const {
  return _internal_has_pdfoptions();
}
inline void Request::clear_pdfoptions() {
  if (GetArenaForAllocation() == nullptr && _impl_.pdfoptions_ != nullptr) {
    delete _impl_.pdfoptions_;
  }
  _impl_.pdfoptions_ = nullptr;
}
inline const ::liburltoimage::PDFOptions& Request::_internal_pdfoptions() const {
  const ::liburltoimage::PDFOptions* p = _impl_.pdfoptions_;
  return p != nullptr ? *p : reinterpret_cast<const ::liburltoimage::PDFOptions&>(
      ::liburltoimage::_PDFOptions_default_instance_);
}
inline const ::liburltoimage::PDFOptions& Request::pdfoptions() const {
  // @@protoc_insertion_point(field_get:liburltoimage.Request.pdfoptions)
  return _internal_pdfoptions();
}
inline void Request::unsafe_arena_set_allocated_pdfoptions(
    ::liburltoimage::PDFOptions* pdfoptions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pdfoptions_);
  }
  _impl_.pdfoptions_ = pdfoptions;
  if (pdfoptions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:liburltoimage.Request.pdfoptions)
}
inline ::liburltoimage::PDFOptions* Request::release_pdfoptions() {
  
  ::liburltoimage::PDFOptions* temp = _impl_.pdfoptions_;
  _impl_.pdfoptions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::liburltoimage::PDFOptions* Request::unsafe_arena_release_pdfoptions() {
  // @@protoc_insertion_point(field_release:liburltoimage.Request.pdfoptions)
  
  ::liburltoimage::PDFOptions* temp = _impl_.pdfoptions_;
  _impl_.pdfoptions_ = nullptr;
  return temp;
}
inline ::liburltoimage::PDFOptions* Request::_internal_mutable_pdfoptions() {
  
  if (_impl_.pdfoptions_ == nullptr) {
    auto* p = CreateMaybeMessage<::liburltoimage::PDFOptions>(GetArenaForAllocation());
    _impl_.pdfoptions_ = p;
  }
  return _impl_.pdfoptions_;
}
inline ::liburltoimage::PDFOptions* Request::mutable_pdfoptions() {
  ::liburltoimage::PDFOptions* _msg = _internal_mutable_pdfoptions();
  // @@protoc_insertion_point(field_mutable:liburltoimage.Request.pdfoptions)
  return _msg;
}
inline void Request::set_allocated_pdfoptions(::liburltoimage::PDFOptions* pdfoptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pdfoptions_;
  }
  if (pdfoptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pdfoptions);
    if (message_arena != submessage_arena) {
      pdfoptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pdfoptions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pdfoptions_ = pdfoptions;
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.Request.pdfoptions)
}

// bool captureBeyondViewport = 7;
inline void Request::clear_capturebeyondviewport() {
  _impl_.capturebeyondviewport_ = false;
}
inline bool Request::_internal_capturebeyondviewport() const {
  return _impl_.capturebeyondviewport_;
}
inline bool Request::capturebeyondviewport() const {
  // @@protoc_insertion_point(field_get:liburltoimage.Request.captureBeyondViewport)
  return _internal_capturebeyondviewport();
}
inline void Request::_internal_set_capturebeyondviewport(bool value) {
  
  _impl_.capturebeyondviewport_ = value;
}
inline void Request::set_capturebeyondviewport(bool value) {
  _internal_set_capturebeyondviewport(value);
  // @@protoc_insertion_point(field_set:liburltoimage.Request.captureBeyondViewport)
}

// -------------------------------------------------------------------

// PDFOptions

// string format = 1;
inline void PDFOptions::clear_format() {
  _impl_.format_.ClearToEmpty();
}
inline const std::string& PDFOptions::format() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFOptions.format)
  return _internal_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PDFOptions::set_format(ArgT0&& arg0, ArgT... args) {
 
 _impl_.format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.PDFOptions.format)
}
inline std::string* PDFOptions::mutable_format() {
  std::string* _s = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:liburltoimage.PDFOptions.format)
  return _s;
}
inline const std::string& PDFOptions::_internal_format() const {
  return _impl_.format_.Get();
}
inline void PDFOptions::_internal_set_format(const std::string& value) {
  
  _impl_.format_.Set(value, GetArenaForAllocation());
}
inline std::string* PDFOptions::_internal_mutable_format() {
  
  return _impl_.format_.Mutable(GetArenaForAllocation());
}
inline std::string* PDFOptions::release_format() {
  // @@protoc_insertion_point(field_release:liburltoimage.PDFOptions.format)
  return _impl_.format_.Release();
}
inline void PDFOptions::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  _impl_.format_.SetAllocated(format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.format_.IsDefault()) {
    _impl_.format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.PDFOptions.format)
}

// bool displayHeaderFooter = 2;
inline void PDFOptions::clear_displayheaderfooter() {
  _impl_.displayheaderfooter_ = false;
}
inline bool PDFOptions::_internal_displayheaderfooter() const {
  return _impl_.displayheaderfooter_;
}
inline bool PDFOptions::displayheaderfooter() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFOptions.displayHeaderFooter)
  return _internal_displayheaderfooter();
}
inline void PDFOptions::_internal_set_displayheaderfooter(bool value) {
  
  _impl_.displayheaderfooter_ = value;
}
inline void PDFOptions::set_displayheaderfooter(bool value) {
  _internal_set_displayheaderfooter(value);
  // @@protoc_insertion_point(field_set:liburltoimage.PDFOptions.displayHeaderFooter)
}

// string footerTemplate = 3;
inline void PDFOptions::clear_footertemplate() {
  _impl_.footertemplate_.ClearToEmpty();
}
inline const std::string& PDFOptions::footertemplate() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFOptions.footerTemplate)
  return _internal_footertemplate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PDFOptions::set_footertemplate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.footertemplate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.PDFOptions.footerTemplate)
}
inline std::string* PDFOptions::mutable_footertemplate() {
  std::string* _s = _internal_mutable_footertemplate();
  // @@protoc_insertion_point(field_mutable:liburltoimage.PDFOptions.footerTemplate)
  return _s;
}
inline const std::string& PDFOptions::_internal_footertemplate() const {
  return _impl_.footertemplate_.Get();
}
inline void PDFOptions::_internal_set_footertemplate(const std::string& value) {
  
  _impl_.footertemplate_.Set(value, GetArenaForAllocation());
}
inline std::string* PDFOptions::_internal_mutable_footertemplate() {
  
  return _impl_.footertemplate_.Mutable(GetArenaForAllocation());
}
inline std::string* PDFOptions::release_footertemplate() {
  // @@protoc_insertion_point(field_release:liburltoimage.PDFOptions.footerTemplate)
  return _impl_.footertemplate_.Release();
}
inline void PDFOptions::set_allocated_footertemplate(std::string* footertemplate) {
  if (footertemplate != nullptr) {
    
  } else {
    
  }
  _impl_.footertemplate_.SetAllocated(footertemplate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.footertemplate_.IsDefault()) {
    _impl_.footertemplate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.PDFOptions.footerTemplate)
}

// string headerTemplate = 4;
inline void PDFOptions::clear_headertemplate() {
  _impl_.headertemplate_.ClearToEmpty();
}
inline const std::string& PDFOptions::headertemplate() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFOptions.headerTemplate)
  return _internal_headertemplate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PDFOptions::set_headertemplate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.headertemplate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.PDFOptions.headerTemplate)
}
inline std::string* PDFOptions::mutable_headertemplate() {
  std::string* _s = _internal_mutable_headertemplate();
  // @@protoc_insertion_point(field_mutable:liburltoimage.PDFOptions.headerTemplate)
  return _s;
}
inline const std::string& PDFOptions::_internal_headertemplate() const {
  return _impl_.headertemplate_.Get();
}
inline void PDFOptions::_internal_set_headertemplate(const std::string& value) {
  
  _impl_.headertemplate_.Set(value, GetArenaForAllocation());
}
inline std::string* PDFOptions::_internal_mutable_headertemplate() {
  
  return _impl_.headertemplate_.Mutable(GetArenaForAllocation());
}
inline std::string* PDFOptions::release_headertemplate() {
  // @@protoc_insertion_point(field_release:liburltoimage.PDFOptions.headerTemplate)
  return _impl_.headertemplate_.Release();
}
inline void PDFOptions::set_allocated_headertemplate(std::string* headertemplate) {
  if (headertemplate != nullptr) {
    
  } else {
    
  }
  _impl_.headertemplate_.SetAllocated(headertemplate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.headertemplate_.IsDefault()) {
    _impl_.headertemplate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.PDFOptions.headerTemplate)
}

// string height = 5;
inline void PDFOptions::clear_height() {
  _impl_.height_.ClearToEmpty();
}
inline const std::string& PDFOptions::height() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFOptions.height)
  return _internal_height();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PDFOptions::set_height(ArgT0&& arg0, ArgT... args) {
 
 _impl_.height_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.PDFOptions.height)
}
inline std::string* PDFOptions::mutable_height() {
  std::string* _s = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:liburltoimage.PDFOptions.height)
  return _s;
}
inline const std::string& PDFOptions::_internal_height() const {
  return _impl_.height_.Get();
}
inline void PDFOptions::_internal_set_height(const std::string& value) {
  
  _impl_.height_.Set(value, GetArenaForAllocation());
}
inline std::string* PDFOptions::_internal_mutable_height() {
  
  return _impl_.height_.Mutable(GetArenaForAllocation());
}
inline std::string* PDFOptions::release_height() {
  // @@protoc_insertion_point(field_release:liburltoimage.PDFOptions.height)
  return _impl_.height_.Release();
}
inline void PDFOptions::set_allocated_height(std::string* height) {
  if (height != nullptr) {
    
  } else {
    
  }
  _impl_.height_.SetAllocated(height, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.height_.IsDefault()) {
    _impl_.height_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.PDFOptions.height)
}

// string width = 6;
inline void PDFOptions::clear_width() {
  _impl_.width_.ClearToEmpty();
}
inline const std::string& PDFOptions::width() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFOptions.width)
  return _internal_width();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PDFOptions::set_width(ArgT0&& arg0, ArgT... args) {
 
 _impl_.width_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.PDFOptions.width)
}
inline std::string* PDFOptions::mutable_width() {
  std::string* _s = _internal_mutable_width();
  // @@protoc_insertion_point(field_mutable:liburltoimage.PDFOptions.width)
  return _s;
}
inline const std::string& PDFOptions::_internal_width() const {
  return _impl_.width_.Get();
}
inline void PDFOptions::_internal_set_width(const std::string& value) {
  
  _impl_.width_.Set(value, GetArenaForAllocation());
}
inline std::string* PDFOptions::_internal_mutable_width() {
  
  return _impl_.width_.Mutable(GetArenaForAllocation());
}
inline std::string* PDFOptions::release_width() {
  // @@protoc_insertion_point(field_release:liburltoimage.PDFOptions.width)
  return _impl_.width_.Release();
}
inline void PDFOptions::set_allocated_width(std::string* width) {
  if (width != nullptr) {
    
  } else {
    
  }
  _impl_.width_.SetAllocated(width, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.width_.IsDefault()) {
    _impl_.width_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.PDFOptions.width)
}

// bool landscape = 7;
inline void PDFOptions::clear_landscape() {
  _impl_.landscape_ = false;
}
inline bool PDFOptions::_internal_landscape() const {
  return _impl_.landscape_;
}
inline bool PDFOptions::landscape() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFOptions.landscape)
  return _internal_landscape();
}
inline void PDFOptions::_internal_set_landscape(bool value) {
  
  _impl_.landscape_ = value;
}
inline void PDFOptions::set_landscape(bool value) {
  _internal_set_landscape(value);
  // @@protoc_insertion_point(field_set:liburltoimage.PDFOptions.landscape)
}

// bool omitBackground = 8;
inline void PDFOptions::clear_omitbackground() {
  _impl_.omitbackground_ = false;
}
inline bool PDFOptions::_internal_omitbackground() const {
  return _impl_.omitbackground_;
}
inline bool PDFOptions::omitbackground() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFOptions.omitBackground)
  return _internal_omitbackground();
}
inline void PDFOptions::_internal_set_omitbackground(bool value) {
  
  _impl_.omitbackground_ = value;
}
inline void PDFOptions::set_omitbackground(bool value) {
  _internal_set_omitbackground(value);
  // @@protoc_insertion_point(field_set:liburltoimage.PDFOptions.omitBackground)
}

// string pageRanges = 9;
inline void PDFOptions::clear_pageranges() {
  _impl_.pageranges_.ClearToEmpty();
}
inline const std::string& PDFOptions::pageranges() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFOptions.pageRanges)
  return _internal_pageranges();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PDFOptions::set_pageranges(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pageranges_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.PDFOptions.pageRanges)
}
inline std::string* PDFOptions::mutable_pageranges() {
  std::string* _s = _internal_mutable_pageranges();
  // @@protoc_insertion_point(field_mutable:liburltoimage.PDFOptions.pageRanges)
  return _s;
}
inline const std::string& PDFOptions::_internal_pageranges() const {
  return _impl_.pageranges_.Get();
}
inline void PDFOptions::_internal_set_pageranges(const std::string& value) {
  
  _impl_.pageranges_.Set(value, GetArenaForAllocation());
}
inline std::string* PDFOptions::_internal_mutable_pageranges() {
  
  return _impl_.pageranges_.Mutable(GetArenaForAllocation());
}
inline std::string* PDFOptions::release_pageranges() {
  // @@protoc_insertion_point(field_release:liburltoimage.PDFOptions.pageRanges)
  return _impl_.pageranges_.Release();
}
inline void PDFOptions::set_allocated_pageranges(std::string* pageranges) {
  if (pageranges != nullptr) {
    
  } else {
    
  }
  _impl_.pageranges_.SetAllocated(pageranges, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pageranges_.IsDefault()) {
    _impl_.pageranges_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.PDFOptions.pageRanges)
}

// .liburltoimage.PDFMargin margin = 10;
inline bool PDFOptions::_internal_has_margin() const {
  return this != internal_default_instance() && _impl_.margin_ != nullptr;
}
inline bool PDFOptions::has_margin() const {
  return _internal_has_margin();
}
inline void PDFOptions::clear_margin() {
  if (GetArenaForAllocation() == nullptr && _impl_.margin_ != nullptr) {
    delete _impl_.margin_;
  }
  _impl_.margin_ = nullptr;
}
inline const ::liburltoimage::PDFMargin& PDFOptions::_internal_margin() const {
  const ::liburltoimage::PDFMargin* p = _impl_.margin_;
  return p != nullptr ? *p : reinterpret_cast<const ::liburltoimage::PDFMargin&>(
      ::liburltoimage::_PDFMargin_default_instance_);
}
inline const ::liburltoimage::PDFMargin& PDFOptions::margin() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFOptions.margin)
  return _internal_margin();
}
inline void PDFOptions::unsafe_arena_set_allocated_margin(
    ::liburltoimage::PDFMargin* margin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.margin_);
  }
  _impl_.margin_ = margin;
  if (margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:liburltoimage.PDFOptions.margin)
}
inline ::liburltoimage::PDFMargin* PDFOptions::release_margin() {
  
  ::liburltoimage::PDFMargin* temp = _impl_.margin_;
  _impl_.margin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::liburltoimage::PDFMargin* PDFOptions::unsafe_arena_release_margin() {
  // @@protoc_insertion_point(field_release:liburltoimage.PDFOptions.margin)
  
  ::liburltoimage::PDFMargin* temp = _impl_.margin_;
  _impl_.margin_ = nullptr;
  return temp;
}
inline ::liburltoimage::PDFMargin* PDFOptions::_internal_mutable_margin() {
  
  if (_impl_.margin_ == nullptr) {
    auto* p = CreateMaybeMessage<::liburltoimage::PDFMargin>(GetArenaForAllocation());
    _impl_.margin_ = p;
  }
  return _impl_.margin_;
}
inline ::liburltoimage::PDFMargin* PDFOptions::mutable_margin() {
  ::liburltoimage::PDFMargin* _msg = _internal_mutable_margin();
  // @@protoc_insertion_point(field_mutable:liburltoimage.PDFOptions.margin)
  return _msg;
}
inline void PDFOptions::set_allocated_margin(::liburltoimage::PDFMargin* margin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.margin_;
  }
  if (margin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(margin);
    if (message_arena != submessage_arena) {
      margin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, margin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.margin_ = margin;
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.PDFOptions.margin)
}

// bool printBackground = 11;
inline void PDFOptions::clear_printbackground() {
  _impl_.printbackground_ = false;
}
inline bool PDFOptions::_internal_printbackground() const {
  return _impl_.printbackground_;
}
inline bool PDFOptions::printbackground() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFOptions.printBackground)
  return _internal_printbackground();
}
inline void PDFOptions::_internal_set_printbackground(bool value) {
  
  _impl_.printbackground_ = value;
}
inline void PDFOptions::set_printbackground(bool value) {
  _internal_set_printbackground(value);
  // @@protoc_insertion_point(field_set:liburltoimage.PDFOptions.printBackground)
}

// bool preferCSSPageSize = 12;
inline void PDFOptions::clear_prefercsspagesize() {
  _impl_.prefercsspagesize_ = false;
}
inline bool PDFOptions::_internal_prefercsspagesize() const {
  return _impl_.prefercsspagesize_;
}
inline bool PDFOptions::prefercsspagesize() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFOptions.preferCSSPageSize)
  return _internal_prefercsspagesize();
}
inline void PDFOptions::_internal_set_prefercsspagesize(bool value) {
  
  _impl_.prefercsspagesize_ = value;
}
inline void PDFOptions::set_prefercsspagesize(bool value) {
  _internal_set_prefercsspagesize(value);
  // @@protoc_insertion_point(field_set:liburltoimage.PDFOptions.preferCSSPageSize)
}

// -------------------------------------------------------------------

// PDFMargin

// string bottom = 1;
inline void PDFMargin::clear_bottom() {
  _impl_.bottom_.ClearToEmpty();
}
inline const std::string& PDFMargin::bottom() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFMargin.bottom)
  return _internal_bottom();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PDFMargin::set_bottom(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bottom_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.PDFMargin.bottom)
}
inline std::string* PDFMargin::mutable_bottom() {
  std::string* _s = _internal_mutable_bottom();
  // @@protoc_insertion_point(field_mutable:liburltoimage.PDFMargin.bottom)
  return _s;
}
inline const std::string& PDFMargin::_internal_bottom() const {
  return _impl_.bottom_.Get();
}
inline void PDFMargin::_internal_set_bottom(const std::string& value) {
  
  _impl_.bottom_.Set(value, GetArenaForAllocation());
}
inline std::string* PDFMargin::_internal_mutable_bottom() {
  
  return _impl_.bottom_.Mutable(GetArenaForAllocation());
}
inline std::string* PDFMargin::release_bottom() {
  // @@protoc_insertion_point(field_release:liburltoimage.PDFMargin.bottom)
  return _impl_.bottom_.Release();
}
inline void PDFMargin::set_allocated_bottom(std::string* bottom) {
  if (bottom != nullptr) {
    
  } else {
    
  }
  _impl_.bottom_.SetAllocated(bottom, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bottom_.IsDefault()) {
    _impl_.bottom_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.PDFMargin.bottom)
}

// string left = 2;
inline void PDFMargin::clear_left() {
  _impl_.left_.ClearToEmpty();
}
inline const std::string& PDFMargin::left() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFMargin.left)
  return _internal_left();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PDFMargin::set_left(ArgT0&& arg0, ArgT... args) {
 
 _impl_.left_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.PDFMargin.left)
}
inline std::string* PDFMargin::mutable_left() {
  std::string* _s = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:liburltoimage.PDFMargin.left)
  return _s;
}
inline const std::string& PDFMargin::_internal_left() const {
  return _impl_.left_.Get();
}
inline void PDFMargin::_internal_set_left(const std::string& value) {
  
  _impl_.left_.Set(value, GetArenaForAllocation());
}
inline std::string* PDFMargin::_internal_mutable_left() {
  
  return _impl_.left_.Mutable(GetArenaForAllocation());
}
inline std::string* PDFMargin::release_left() {
  // @@protoc_insertion_point(field_release:liburltoimage.PDFMargin.left)
  return _impl_.left_.Release();
}
inline void PDFMargin::set_allocated_left(std::string* left) {
  if (left != nullptr) {
    
  } else {
    
  }
  _impl_.left_.SetAllocated(left, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.left_.IsDefault()) {
    _impl_.left_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.PDFMargin.left)
}

// string right = 3;
inline void PDFMargin::clear_right() {
  _impl_.right_.ClearToEmpty();
}
inline const std::string& PDFMargin::right() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFMargin.right)
  return _internal_right();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PDFMargin::set_right(ArgT0&& arg0, ArgT... args) {
 
 _impl_.right_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.PDFMargin.right)
}
inline std::string* PDFMargin::mutable_right() {
  std::string* _s = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:liburltoimage.PDFMargin.right)
  return _s;
}
inline const std::string& PDFMargin::_internal_right() const {
  return _impl_.right_.Get();
}
inline void PDFMargin::_internal_set_right(const std::string& value) {
  
  _impl_.right_.Set(value, GetArenaForAllocation());
}
inline std::string* PDFMargin::_internal_mutable_right() {
  
  return _impl_.right_.Mutable(GetArenaForAllocation());
}
inline std::string* PDFMargin::release_right() {
  // @@protoc_insertion_point(field_release:liburltoimage.PDFMargin.right)
  return _impl_.right_.Release();
}
inline void PDFMargin::set_allocated_right(std::string* right) {
  if (right != nullptr) {
    
  } else {
    
  }
  _impl_.right_.SetAllocated(right, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.right_.IsDefault()) {
    _impl_.right_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.PDFMargin.right)
}

// string top = 4;
inline void PDFMargin::clear_top() {
  _impl_.top_.ClearToEmpty();
}
inline const std::string& PDFMargin::top() const {
  // @@protoc_insertion_point(field_get:liburltoimage.PDFMargin.top)
  return _internal_top();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PDFMargin::set_top(ArgT0&& arg0, ArgT... args) {
 
 _impl_.top_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.PDFMargin.top)
}
inline std::string* PDFMargin::mutable_top() {
  std::string* _s = _internal_mutable_top();
  // @@protoc_insertion_point(field_mutable:liburltoimage.PDFMargin.top)
  return _s;
}
inline const std::string& PDFMargin::_internal_top() const {
  return _impl_.top_.Get();
}
inline void PDFMargin::_internal_set_top(const std::string& value) {
  
  _impl_.top_.Set(value, GetArenaForAllocation());
}
inline std::string* PDFMargin::_internal_mutable_top() {
  
  return _impl_.top_.Mutable(GetArenaForAllocation());
}
inline std::string* PDFMargin::release_top() {
  // @@protoc_insertion_point(field_release:liburltoimage.PDFMargin.top)
  return _impl_.top_.Release();
}
inline void PDFMargin::set_allocated_top(std::string* top) {
  if (top != nullptr) {
    
  } else {
    
  }
  _impl_.top_.SetAllocated(top, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.top_.IsDefault()) {
    _impl_.top_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.PDFMargin.top)
}

// -------------------------------------------------------------------

// FileContent

// string name = 1;
inline void FileContent::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FileContent::name() const {
  // @@protoc_insertion_point(field_get:liburltoimage.FileContent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileContent::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.FileContent.name)
}
inline std::string* FileContent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:liburltoimage.FileContent.name)
  return _s;
}
inline const std::string& FileContent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FileContent::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileContent::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileContent::release_name() {
  // @@protoc_insertion_point(field_release:liburltoimage.FileContent.name)
  return _impl_.name_.Release();
}
inline void FileContent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.FileContent.name)
}

// bytes content = 2;
inline void FileContent::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& FileContent::content() const {
  // @@protoc_insertion_point(field_get:liburltoimage.FileContent.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileContent::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.FileContent.content)
}
inline std::string* FileContent::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:liburltoimage.FileContent.content)
  return _s;
}
inline const std::string& FileContent::_internal_content() const {
  return _impl_.content_.Get();
}
inline void FileContent::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* FileContent::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* FileContent::release_content() {
  // @@protoc_insertion_point(field_release:liburltoimage.FileContent.content)
  return _impl_.content_.Release();
}
inline void FileContent::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.FileContent.content)
}

// -------------------------------------------------------------------

// Response

// int32 code = 1;
inline void Response::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t Response::_internal_code() const {
  return _impl_.code_;
}
inline int32_t Response::code() const {
  // @@protoc_insertion_point(field_get:liburltoimage.Response.code)
  return _internal_code();
}
inline void Response::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void Response::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:liburltoimage.Response.code)
}

// string message = 2;
inline void Response::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:liburltoimage.Response.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:liburltoimage.Response.message)
}
inline std::string* Response::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:liburltoimage.Response.message)
  return _s;
}
inline const std::string& Response::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Response::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:liburltoimage.Response.message)
  return _impl_.message_.Release();
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:liburltoimage.Response.message)
}

// repeated .liburltoimage.FileContent files = 3;
inline int Response::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int Response::files_size() const {
  return _internal_files_size();
}
inline void Response::clear_files() {
  _impl_.files_.Clear();
}
inline ::liburltoimage::FileContent* Response::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:liburltoimage.Response.files)
  return _impl_.files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liburltoimage::FileContent >*
Response::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:liburltoimage.Response.files)
  return &_impl_.files_;
}
inline const ::liburltoimage::FileContent& Response::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const ::liburltoimage::FileContent& Response::files(int index) const {
  // @@protoc_insertion_point(field_get:liburltoimage.Response.files)
  return _internal_files(index);
}
inline ::liburltoimage::FileContent* Response::_internal_add_files() {
  return _impl_.files_.Add();
}
inline ::liburltoimage::FileContent* Response::add_files() {
  ::liburltoimage::FileContent* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:liburltoimage.Response.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::liburltoimage::FileContent >&
Response::files() const {
  // @@protoc_insertion_point(field_list:liburltoimage.Response.files)
  return _impl_.files_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace liburltoimage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_urltoimage_2furltoimage_2eproto
