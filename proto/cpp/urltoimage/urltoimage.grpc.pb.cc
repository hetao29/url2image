// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: urltoimage/urltoimage.proto

#include "urltoimage/urltoimage.pb.h"
#include "urltoimage/urltoimage.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace liburltoimage {

static const char* Urltoimage_method_names[] = {
  "/liburltoimage.Urltoimage/Convert",
};

std::unique_ptr< Urltoimage::Stub> Urltoimage::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Urltoimage::Stub> stub(new Urltoimage::Stub(channel));
  return stub;
}

Urltoimage::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Convert_(Urltoimage_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Urltoimage::Stub::Convert(::grpc::ClientContext* context, const ::liburltoimage::Request& request, ::liburltoimage::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Convert_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::liburltoimage::Response>* Urltoimage::Stub::AsyncConvertRaw(::grpc::ClientContext* context, const ::liburltoimage::Request& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::liburltoimage::Response>(channel_.get(), cq, rpcmethod_Convert_, context, request);
}

Urltoimage::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Urltoimage_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Urltoimage::Service, ::liburltoimage::Request, ::liburltoimage::Response>(
          std::mem_fn(&Urltoimage::Service::Convert), this)));
}

Urltoimage::Service::~Service() {
}

::grpc::Status Urltoimage::Service::Convert(::grpc::ServerContext* context, const ::liburltoimage::Request* request, ::liburltoimage::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace liburltoimage

